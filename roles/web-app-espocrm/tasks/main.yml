---
- name: "load docker, db and proxy for {{ application_id }}"
  include_role:
    name: sys-stk-full-stateful
  vars:
    docker_compose_flush_handlers: false

- name: "Deploy '{{ ESPOCRM_ENTRYPOINT_SCRIPT_HOST_ABS }}'"
  copy:
    src:  "{{ ESPOCRM_ENTRYPOINT_SCRIPT_FILE }}" 
    dest: "{{ ESPOCRM_ENTRYPOINT_SCRIPT_HOST_ABS }}"
  notify: 
    - docker compose up
    - docker compose build

- name: "Deploy '{{ ESPOCRM_SET_FLAG_SCRIPT_HOST_ABS }}'"
  copy:
    src:  "{{ ESPOCRM_SET_FLAG_SCRIPT_FILE }}" 
    dest: "{{ ESPOCRM_SET_FLAG_SCRIPT_HOST_ABS }}"
  notify: 
    - docker compose up
    - docker compose build


- name: "Docker Compose Up for '{{ application_id }}'"
  meta: flush_handlers

- name: Check if config.php exists in EspoCRM
  command: docker exec --user root {{ ESPOCRM_CONTAINER }} test -f {{ ESPOCRM_CONFIG_FILE_PRIVATE }}
  register: config_file_exists
  changed_when: false
  failed_when:  false

- name: Patch EspoCRM config.php
  include_tasks: 01_patch_config.yml
  when: config_file_exists.rc == 0

- name: Run EspoCRM upgrade (only when MODE_UPDATE is true)
  command: >
    docker exec --user {{ ESPOCRM_USER }} {{ ESPOCRM_CONTAINER }}
    php command.php upgrade -y
  register: espocrm_upgrade
  changed_when: "'Upgrading' in espocrm_upgrade.stdout or 'successfully' in espocrm_upgrade.stdout"
  failed_when: false
  when: MODE_UPDATE | bool

- name: Run flag setter as root (fallback)
  command: >
    docker exec --user root {{ ESPOCRM_CONTAINER }}
    php {{ ESPOCRM_SET_FLAG_SCRIPT_DOCKER }}
  register: flags_result_root
  changed_when: "'CHANGED' in flags_result_root.stdout"

- name: Flush handlers to make DB available before password reset
  meta: flush_handlers
