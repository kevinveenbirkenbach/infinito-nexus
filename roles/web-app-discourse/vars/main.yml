application_id:                 "web-app-discourse"

# Database
database_password:              "{{ applications | get_app_conf(application_id, 'credentials.database_password') }}"
database_type:                  "postgres"

# Discourse

## General
DISCOURSE_CONTAINER:            "{{ applications | get_app_conf(application_id, 'docker.services.discourse.name') }}"
DISCOURSE_NETWORK:              "{{ applications | get_app_conf(application_id, 'docker.network') }}"
DISCOURSE_VOLUME:               "{{ applications | get_app_conf(application_id, 'docker.volumes.data') }}"
DISCOURSE_PLUGINS:              "{{ applications | get_app_conf(application_id, 'plugins') }}"
DISCOURSE_PG_NETWORK:           "{{ applications | get_app_conf('svc-db-' ~ database_type, 'docker.network' ) }}"
DISCOURSE_REDIS_HOST:           "{{ application_id | get_entity_name }}-redis"
DISCOURSE_REPOSITORY_URL:       "{{ applications | get_app_conf(application_id, 'docker.services.discourse.repository') }}"

## Directories
DISCOURSE_REPOSITORY_DIR:       "{{ docker_compose.directories.services }}{{ applications | get_app_conf( application_id, 'repository') }}/"
DISCOURSE_CONTAINERS_DIR:       "{{ [ DISCOURSE_REPOSITORY_DIR, 'containers' ] | path_join }}"

## Files
DISCOURSE_APPLICATION_YML_DEST: "{{ [ DISCOURSE_CONTAINERS_DIR, DISCOURSE_CONTAINER ~ '.yml' ] | path_join }}"

## Error Strings
DISCOURSE_ERROR_ALREADY_IN_NET: "Error response from daemon: endpoint with name {{ DISCOURSE_CONTAINER }} already exists in network {{ DISCOURSE_PG_NETWORK }}"
DISCOURSE_ERROR_NOT_CONNECTED:  'is not connected to network {{ DISCOURSE_NETWORK }}'